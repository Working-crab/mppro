from ui_backend.app import bot
from ui_backend.common import universal_reply_markup, status_parser, paginate_buttons, get_bids_table, city_reply_markup, escape_telegram_specials, logs_types_reply_markup, universal_reply_markup_additionally, advert_info_message_maker
import re
from telebot import types, apihelper
from db.queries import db_queries
from wb_common.wb_queries import wb_queries
import traceback
from datetime import datetime, timedelta

from cache_worker.cache_worker import cache_worker

import time

from ui_backend.message_queue import queue_message

from common.appLogger import appLogger
logger = appLogger.getLogger(__name__)

#–ü—Ä–∏–º–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
#db_queries.add_action_history(user_id=message.chat.id, action=f"–ö–∞–∫–æ–µ-—Ç–æ —Å–æ–±—ã—Ç–∏–µ")

# –í–µ—Ç–∫–∞ "–ü–æ–∏—Å–∫" --------------------------------------------------------------------------------------------------------
@bot.message_handler(regexp='–ü–æ–∏—Å–∫')
def cb_adverts(message):
    try:
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(sent, search_next_step_handler)
    except Exception as e:
        bot.send_message(message.chat.id, e)
        
def search_next_step_handler(message, city=None, keyword=None, choose=False):
  try:
    user_id = message.from_user.id
    if keyword == None:
      keyword = re.sub('/search ', '', message.text)
      
    db_queries.add_action_history(user_id=message.chat.id, action=f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{keyword}'")
    
    city = cache_worker.get_city(user_id)
    if city == None:
      city = "–ú–æ—Å–∫–≤–∞"
    
    
    proccesing = bot.send_message(message.chat.id, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...')
    item_dicts = wb_queries.search_adverts_by_keyword(keyword, user_id)
    result_message = ''
    position_ids = []
    
    chat_id_proccessing = proccesing.chat.id
    message_id_proccessing = proccesing.message_id
    
    if len(item_dicts) == 0:
      bot.delete_message(chat_id_proccessing, message_id_proccessing)
      bot.send_message(message.chat.id, '–¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=universal_reply_markup())
      return

    for item_idex in range(len(item_dicts)):
      position_ids.append(str(item_dicts[item_idex]['p_id']))

      price = item_dicts[item_idex]['price']
      p_id = item_dicts[item_idex]['p_id']
      result_message += f'\\[{item_idex + 1}\\]   *{price}‚ÇΩ*,  [{p_id}](https://www.wildberries.ru/catalog/{p_id}/detail.aspx) üîÑ \n'
    
    bot.delete_message(chat_id_proccessing, message_id_proccessing)
    message_to_update = bot.send_message(message.chat.id, result_message, reply_markup=universal_reply_markup(), parse_mode='MarkdownV2')


    result_message = f'–¢–µ–∫—É—â–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{keyword}*\n–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: *{city}*\n\n'
    adverts_info = wb_queries.get_products_info_by_wb_ids(position_ids, city, user_id)

    logger.info('adverts_info')
    logger.info(adverts_info)

    logger.info('range(len(item_dicts))')
    logger.info(range(len(item_dicts)))
    for item_idex in range(len(item_dicts)):

      product_id = item_dicts[item_idex]['p_id']
      price = item_dicts[item_idex]['price']
      message_string = f'\\[{item_idex + 1}\\]   *{price}‚ÇΩ*,  [{product_id}](https://www.wildberries.ru/catalog/{product_id}/detail.aspx)'
      advert_info = adverts_info.get(product_id)

      if advert_info:
        product_name = escape_telegram_specials(advert_info.get('name')[:30]) if advert_info.get('name')[:30] else product_id
        product_time = f'{advert_info.get("time2")}—á' if advert_info.get('time2') else ''
        product_category_name = advert_info.get('category_name') if advert_info.get('category_name') else ''
        message_string = f'\\[{item_idex + 1}\\] \t *{price}‚ÇΩ*, \t {product_category_name} \t {product_time} \t [{product_name}](https://www.wildberries.ru/catalog/{product_id}/detail.aspx)'
      else:
        message_string += ' –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'

      result_message += f'{message_string}\n'

    if result_message:
      bot.delete_message(message_to_update.chat.id, message_to_update.message_id)
      bot.send_message(message.chat.id, result_message, reply_markup=universal_reply_markup(search=True), parse_mode='MarkdownV2')
      if not choose: 
        cache_worker.set_search(user_id=message.chat.id, message=message)


  except Exception as e:
    traceback.print_exc()
    db_queries.add_action_history(user_id=message.chat.id, action=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ\nC—É—Ç—å –æ—à–∏–±–∫–∏: {e}")
    bot.send_message(message.chat.id, e, reply_markup=universal_reply_markup())


@bot.message_handler(regexp='–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥')
def choose_city(message):
    try:
      city = cache_worker.get_city(message.chat.id)
      if city == None:
        city = "–ú–æ—Å–∫–≤–∞"
      
      bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –ø–∞–Ω–µ–ª–∏\n–£ –≤–∞—Å —Å—Ç–æ–∏—Ç: *{city}*', reply_markup=city_reply_markup(), parse_mode='MarkdownV2')
    except Exception as e:
        traceback.print_exc()
        logger.error(e)
        bot.send_message(message.chat.id, e, reply_markup=universal_reply_markup())
        
        
@bot.message_handler(regexp='–í—ã–±–æ—Ä:')
def choose_city(message):
    try:
      city = message.text.split()[1]
      
      try_message = cache_worker.get_search(user_id=message.chat.id)
      if try_message != None:
        keyword = try_message['text']
      
      cache_worker.set_city(message.chat.id, city)
      
      search_next_step_handler(message, city, keyword=keyword, choose=True)
    except Exception as e:
        traceback.print_exc()
        logger.error(e)
        bot.send_message(message.chat.id, e, reply_markup=universal_reply_markup())

# ------------------------------------------------------------------------------------------------------------------------------------------------

# –í–µ—Ç–∫–∞ "–ü–æ–º–æ—â—å" ---------------------------------------------------------------------------------------------------------------------------------

@bot.message_handler(regexp='–ü–æ–º–æ—â—å')
def cb_adverts(message):
  queue_message(
    destination_id=message.chat.id,
    message='–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: \n (https://t.me/tNeymik) \n (https://t.me/plazmenni_rezak)',
    user_id=message.from_user.id
  )
  pass
# ------------------------------------------------------------------------------------------------------------------------------------------------

# –í–µ—Ç–∫–∞ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω" -----------------------------------------------------------------------------------------------------------------------
@bot.message_handler(regexp='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω')
def cb_adverts(message):
    try:
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(sent,set_token_cmp_handler)
    except Exception as e:
        bot.send_message(message.chat.id, e, reply_markup=universal_reply_markup())

def set_token_cmp_handler(message):
    try:
        clear_token = message.text.replace('/set_token_cmp ', '').strip()
        db_queries.set_user_wb_cmp_token(telegram_user_id=message.from_user.id, wb_cmp_token=clear_token)
        user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
        wb_queries.reset_base_tokens(user)

        bot.send_message(message.chat.id, '–í–∞—à —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\!', reply_markup=universal_reply_markup(), parse_mode='MarkdownV2')
        db_queries.add_action_history(user_id=message.chat.id, action=f"–ë—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω: '{clear_token}'")

    except Exception as e:

        # TODO check Exception for "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!" Exception
        bot.send_message(message.chat.id, e, reply_markup=universal_reply_markup())
        db_queries.add_action_history(user_id=message.chat.id, action=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞")
        logger.error(e)
# ------------------------------------------------------------------------------------------------------------------------------------------------

# –í–µ—Ç–∫–∞ "–°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π" --------------------------------------------------------------------------------------------------------------
@bot.message_handler(regexp='–°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π')
def cb_adverts(message):
    """–§—É–Ω–∫–∏—è –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç list_adverts_handler"""
    try:
      list_adverts_handler(message)
    except Exception as e:
        traceback.print_exc() # Maxim molodec TODO print_exc in all Exceptions
        logger.error(e)
        bot.send_message(message.chat.id, e, reply_markup=universal_reply_markup())


def list_adverts_handler(message):
  """–§—É–Ω–∫–∏—è –∫–æ—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
  user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  user_wb_tokens = wb_queries.get_base_tokens(user)
  req_params = wb_queries.get_base_request_params(user_wb_tokens)
  

  page_number = 1
  user_atrevds_data = wb_queries.get_user_atrevds(req_params, page_number)

  result_msg = advert_info_message_maker(user_atrevds_data['adverts'], page_number=page_number)

  page_size = 6
  total_count_adverts = user_atrevds_data['total_count']
  action = "page"
  inline_keyboard = paginate_buttons(action, page_number, total_count_adverts, page_size, message.from_user.id)
  
  try:
    bot.send_message(message.chat.id, result_msg, reply_markup=inline_keyboard, parse_mode='MarkdownV2')
  except Exception as e:
    logger.error(e)



@bot.callback_query_handler(func=lambda x: re.match('page', x.data))
def kek(data):
    try:
      bot.edit_message_text('–í–∞–π–ª–¥–±–µ—Ä–∏—Å —Å—Ç–∞—Ä–∞–µ—Ç—Å—è üîÑ', data.message.chat.id, data.message.id, parse_mode='MarkdownV2')
      type_of_callback, page_number, user_id = data.data.split(':') # parameters = [type_of_callback, page_number, user_id]
      page_number = int(page_number)
      user = db_queries.get_user_by_telegram_user_id(user_id)
      user_wb_tokens = wb_queries.get_base_tokens(user)
      req_params = wb_queries.get_base_request_params(user_wb_tokens)
      user_atrevds_data = wb_queries.get_user_atrevds(req_params, page_number)

      
      # kek1 = get_bids_table(user_id, 3833716) TODO
      result_msg = advert_info_message_maker(user_atrevds_data['adverts'], page_number=page_number)

      total_count = user_atrevds_data['total_count']
      page_size = 6
      action = "page"
      inline_keyboard = paginate_buttons(action, page_number, total_count, page_size, user_id)

      bot.edit_message_text(result_msg, data.message.chat.id, data.message.id, parse_mode='MarkdownV2')
      bot.edit_message_reply_markup(data.message.chat.id, data.message.id , reply_markup=inline_keyboard)
      bot.answer_callback_query(data.id)
    except Exception as e:
        bot.send_message(data.message.chat.id, f'{e} ,')
        traceback.print_exc()
# ------------------------------------------------------------------------------------------------------------------------------------------------

# –í–µ—Ç–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é" ------------------------------------------------------------------------------------------------------------
@bot.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é')
def cb_adverts(message):
    try:
        msg_text = '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "<campaign_id> <max_budget> <place> <status>" –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.'
        sent = bot.send_message(message.chat.id, msg_text, reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(sent,add_advert_handler)
    except Exception as e:
        bot.send_message(message.chat.id, e)

def add_advert_handler(message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Å–∏–∏ –≤ –±–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —é–∑–µ—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
    TO wOrKeD:
    (–∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –±—é–¥–∂–µ—Ç, –º–µ—Å—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—Ç –∑–∞–Ω—è—Ç—å)
    –∑–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ –≤ –±–¥
    """
    try:
        user = db_queries.get_user_by_telegram_user_id(message.from_user.id)

        #(–∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –±—é–¥–∂–µ—Ç, –º–µ—Å—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—Ç –∑–∞–Ω—è—Ç—å)args*
        message_args = re.sub('/add_advert ', '', message.text).split(sep=' ', maxsplit=4)
        if len(message_args) != 4:
            msg_text = '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_advert <campaign_id> <max_budget> <place> <status>'
            bot.send_message(message.chat.id, msg_text, reply_markup=universal_reply_markup())
            return

        campaign_id = re.sub('/add_advert ', '', message_args[0])
        max_budget = re.sub('/add_advert ', '', message_args[1])
        place = re.sub('/add_advert ', '', message_args[2])
        status = re.sub('/add_advert ', '', message_args[3])

        add_result = db_queries.add_user_advert(user, status, campaign_id, max_budget, place)
        
        res_msg = ''
        if add_result == 'UPDATED':
            res_msg = '–í–∞—à–∞ —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\!'
        elif add_result == 'ADDED':
            res_msg = '–í–∞—à–∞ —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞\!'

        bot.send_message(message.chat.id, res_msg, reply_markup=universal_reply_markup(), parse_mode='MarkdownV2')
    except Exception as e:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', reply_markup=universal_reply_markup())
        logger.error(e)
# ------------------------------------------------------------------------------------------------------------------------------------------------

# –í–µ—Ç–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫–∞" -----------------------------------------------------------------------------------------------------------------
@bot.message_handler(regexp='–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫–∞')
def cb_adverts(message):
    try:
        sent = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id user\'–∞\n–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–∞—Ç—É, –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ 2023-03-02 14:30', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(sent, search_logs_next_step_handler)
    except Exception as e:
        bot.send_message(message.chat.id, e)
        
        
def search_logs_next_step_handler(message):
  try:
    search_logs = re.sub('/search_id ', '', message.text)
    search_user_id = search_logs.split()[0]
    timestamp = search_logs.split()[1] + " " + search_logs.split()[2]
    bot.send_message(message.chat.id, f"user_id: {search_user_id}\ntimestamp: {timestamp}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç–∏–ø –ª–æ–≥–æ–≤ –í–∞—Å –∏–Ω—Ç–µ—Ä–∏—Å—É–µ—Ç", reply_markup=logs_types_reply_markup(user_id=search_user_id, timestamp=timestamp))
    
    
  except Exception as e:
    traceback.print_exc()
    bot.send_message(message.chat.id, e, reply_markup=universal_reply_markup())

        
# ------------------------------------------------------------------------------------------------------------------------------------------------
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ ---------------------------------------------------------------------------------------------------------------------------

@bot.message_handler(regexp='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏')
def cb_adverts(message):
    try:
        bot.send_message(message.chat.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏*", parse_mode='MarkdownV2', reply_markup=universal_reply_markup_additionally())
    except Exception as e:
        bot.send_message(message.chat.id, e)
        

@bot.message_handler(regexp='–ù–∞–∑–∞–¥')
def cb_adverts(message):
    try:
        back = bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å *–ù–∞–∑–∞–¥* ü§ì", parse_mode='MarkdownV2', reply_markup=universal_reply_markup())

    except Exception as e:
        bot.send_message(message.chat.id, e)

# ------------------------------------------------------------------------------------------------------------------------------------------------

# –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π -------------------------------------------------------------------------------------------------------------------------------
@bot.message_handler(regexp='–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π')
def show_action_history(message):
  try:
    page_number = 1
    page_action = 5
    action_history = db_queries.show_action_history(message.chat.id, page_action)
    total_count_action = action_history.count()
    
    result_message = f'–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—Ç–µ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}\n\n'
    i = 1
    if total_count_action == 0:
      return bot.send_message(message.chat.id, '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=universal_reply_markup())
    else:
      if page_number == 1:
        action_history = action_history[page_number-1:page_action]
    
    for action in action_history:
      result_message += f'[{i}]-----------------------------\n–î–∞—Ç–∞: {(action.date_time + timedelta(hours=3)).strftime("%m/%d/%Y, %H:%M:%S")}\n\n–î–µ–π—Å—Ç–≤–∏–µ: {action.action}\n-----------------------------\n\n'
      i+=1
      
    action = "action"
    inline_keyboard = paginate_buttons(action, page_number, total_count_action, page_action, message.from_user.id)
    bot.send_message(message.chat.id, result_message, reply_markup=inline_keyboard)
    
    
  except Exception as e:
      bot.send_message(message.chat.id, e)
        

@bot.callback_query_handler(func=lambda x: re.match('action', x.data))
def action_page(data):
    try:
      bot.edit_message_text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è üîÑ', data.message.chat.id, data.message.id)
      type_of_callback, page_number, user_id = data.data.split(':') # parameters = [type_of_callback, page_number, user_id]
      page_number = int(page_number)
      page_action = 5
      action_history = db_queries.show_action_history(data.message.chat.id, page_action)
      total_count_action = action_history.count()
      
      result_message = f'–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—Ç–µ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}\n\n'
      
      if page_number != 1:
        action_history = action_history[(5*(page_number-1)):page_action*page_number]
        i = (5 * page_number)-4
      else:
        action_history = action_history[page_number-1:page_action]
        i = (5 * page_number)-4
        
      for action in action_history:
        result_message += f'[{i}]-----------------------------\n–î–∞—Ç–∞: {(action.date_time + timedelta(hours=3)).strftime("%m/%d/%Y, %H:%M:%S")}\n\n–î–µ–π—Å—Ç–≤–∏–µ: {action.action}\n-----------------------------\n\n'
        i+=1
      action = "action"
      inline_keyboard = paginate_buttons(action, page_number, total_count_action, page_action, user_id)      
    
      bot.edit_message_text(result_message, data.message.chat.id, data.message.id)
      bot.edit_message_reply_markup(data.message.chat.id, data.message.id , reply_markup=inline_keyboard)
      bot.answer_callback_query(data.id)
    except Exception as e:
      bot.send_message(data.message.chat.id, f'{e} ,')
      traceback.print_exc()
# ------------------------------------------------------------------------------------------------------------------------------------------------