import re
from unittest import mock
from ui_backend.app import bot
from ui_backend.common import (edit_token_reply_markup, format_requests_count, management_tokens_reply_markup, paid_requests_inline_markup, paid_service_reply_markup, status_parser, 
                               switch_status_reply_markup, 
                               universal_reply_markup, 
                               paginate_buttons, 
                               city_reply_markup, 
                               escape_telegram_specials, 
                               logs_types_reply_markup, 
                               universal_reply_markup_additionally, 
                               advert_info_message_maker, 
                               reply_markup_payment, 
                               adv_settings_reply_markup, 
                               action_history_reply_markup, 
                               action_history_filter_reply_markup, 
                               adv_settings_words_reply_markup, 
                               fixed_word_switch,
                               check_sub, 
                               paid_requests_inline_markup)
from telebot import types
from db.queries import db_queries
from wb_common.wb_queries import wb_queries
from datetime import datetime, timedelta
from cache_worker.cache_worker import cache_worker
from kafka_dir.general_publisher import queue_message_async
from kafka_dir.topics import Topics
import copy
from gpt_common.gpt_queries import gpt_queries
import json

import io

from ui_backend.config import *
from yookassa import Payment

import traceback
from common.appLogger import appLogger
logger = appLogger.getLogger(__name__)

#–ü—Ä–∏–º–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
#db_queries.add_action_history(user_id=message.chat.id, action=f"–ö–∞–∫–æ–µ-—Ç–æ —Å–æ–±—ã—Ç–∏–µ")
INCREASE = 10
# all messages handler
@bot.message_handler(func=lambda m: True)
async def message_handler(message):

  try:
    logger.info('message from')
    logger.info(message.chat.id)
    logger.info('message text')
    logger.info(message.text)

    telegram_user_id = message.from_user.id

    user_session = cache_worker.get_user_session(telegram_user_id)

    logger.debug('user_session')
    logger.debug(user_session)
    
    logger.warn(user_session)

    message.user_session = user_session
    message.user_session_old = copy.deepcopy(user_session)
    message.user_session_step_set = False

    user_step = user_session.get('step', '–ë–∞–∑–∞')

    possible_actions = step_map.get(user_step, {})

    user_action = None
    for key in possible_actions:
      if re.search(key, message.text):
        user_action = possible_actions[key]
        break

    logger.debug('user_action')
    logger.debug(user_action)

    user_action_default = possible_actions.get('default')
    if user_action:
      await user_action(message)
    elif user_action_default:
      await user_action_default(message)
      

    if not message.user_session_step_set:
      set_user_session_step(message, '–ë–∞–∑–∞')

    update_user_session(message)


  except Exception as e:
    traceback.print_exc()
    logger.error(e)
    logger.warn(f"EXCEPTION {str(e)}")
    if str(e) == '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!':
      await queue_message_async(
        topic = 'telegram_message_sender',
        destination_id = message.chat.id,
        message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞! –í–æ–∑–º–æ–∂–Ω–æ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω!'
      )
      return
    
    if "Read timed out" in str(e):
      await queue_message_async(
        topic = 'telegram_message_sender',
        destination_id = message.chat.id,
        message = 'WB —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ'
      )
      return
    
    if "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞" in str(e):
      await queue_message_async(
        topic = 'telegram_message_sender',
        destination_id = message.chat.id,
        message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞! –¢–∞–∫ –∫–∞–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç WildAuthNewV3 —Ç–æ–∫–µ–Ω, –µ–º—É –æ—Ç–¥–∞–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'
      )
      return
    
    if "wb_query" in str(e):
      if "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!" in str(e):
        await queue_message_async(
        topic = 'telegram_message_sender',
        destination_id = message.chat.id,
        message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞! –í–æ–∑–º–æ–∂–Ω–æ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω!'
        )
        return
      
      if "x_supplier_id –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!" in str(e):
        await queue_message_async(
          topic = 'telegram_message_sender',
          destination_id = message.chat.id,
          message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! x_supplier_id –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –µ–≥–æ'
        )
        return
      
      if "EOF" in str(e):
        await queue_message_async(
          topic = 'telegram_message_sender',
          destination_id = message.chat.id,
          message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ WB, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
        )
        return
      
    
      # else:
      #   await queue_message_async(
      #     destination_id = message.chat.id,
      #     message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏—é –∫ Wildberries, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
      #   )
      
      #   return
    
    
    set_user_session_step(message, '–ë–∞–∑–∞')
    update_user_session(message)

    await queue_message_async(
      topic = 'telegram_message_sender',
      destination_id = message.chat.id,
      message = '–ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    )



# –í–µ—Ç–∫–∞ "–ü–æ–∏—Å–∫" --------------------------------------------------------------------------------------------------------

async def search_adverts(message):
  await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ', reply_markup=types.ReplyKeyboardRemove())
  set_user_session_step(message, 'Search_adverts')
        
async def search_next_step_handler(message, after_city_choose=False):
  telegram_user_id = message.from_user.id
  keyword = None

  if after_city_choose:
    keyword = message.user_session.get('search_last')
  else:
    keyword = message.text
      
  db_queries.add_action_history(telegram_user_id=telegram_user_id, action="–ü–æ–∏—Å–∫", action_description=f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{keyword}'")
  
  city = message.user_session.get('search_city')
  if city == None:
    city = "–ú–æ—Å–∫–≤–∞"
  
  proccesing = await bot.send_message(message.chat.id, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...')
  item_dicts = wb_queries.search_adverts_by_keyword(keyword, telegram_user_id)
  result_message = ''
  position_ids = []
  
  chat_id_proccessing = proccesing.chat.id
  message_id_proccessing = proccesing.message_id
  
  if len(item_dicts) == 0:
    await bot.delete_message(chat_id_proccessing, message_id_proccessing)
    await bot.send_message(message.chat.id, '–¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=universal_reply_markup())
    return

  for item_idex in range(len(item_dicts)):
    position_ids.append(str(item_dicts[item_idex]['p_id']))
    pos = item_dicts[item_idex].get('wb_search_position')
    price = item_dicts[item_idex]['price']
    p_id = item_dicts[item_idex]['p_id']
    
    result_message += f'*{item_idex + 1}*  \\({pos}\\)   *{price}‚ÇΩ*,  [{p_id}](https://www.wildberries.ru/catalog/{p_id}/detail.aspx) üîÑ \n'
  
  await bot.delete_message(chat_id_proccessing, message_id_proccessing)
  message_to_update = await bot.send_message(message.chat.id, result_message, reply_markup=universal_reply_markup(), parse_mode='MarkdownV2')


  result_message = f'–¢–µ–∫—É—â–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{keyword}*\n–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: *{city}*\n\n'
  adverts_info = wb_queries.get_products_info_by_wb_ids(position_ids, city, telegram_user_id)

  for item_idex in range(len(item_dicts)):

    product_id = item_dicts[item_idex]['p_id']
    price = item_dicts[item_idex]['price']
    pos = item_dicts[item_idex].get('wb_search_position')
    message_string = f'\\[{item_idex + 1}\\]  *{price}‚ÇΩ*,  [{product_id}](https://www.wildberries.ru/catalog/{product_id}/detail.aspx)'
    advert_info = adverts_info.get(product_id)
    position_index = f'*{item_idex + 1}*'

    if advert_info:
      product_name = escape_telegram_specials(advert_info.get('name')[:30]) if advert_info.get('name')[:30] else product_id
      product_time = f'{advert_info.get("time2")}—á' if advert_info.get('time2') else ''
      product_category_name = advert_info.get('category_name') if advert_info.get('category_name') else ''
      message_string = f'{position_index} \t \\({pos}\\) \t *{price}‚ÇΩ*, \t {product_category_name} \t {product_time} \t [{product_name}](https://www.wildberries.ru/catalog/{product_id}/detail.aspx)'
    else:
      message_string += ' –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'

    result_message += f'{message_string}\n'

  if result_message:
    await bot.delete_message(message_to_update.chat.id, message_to_update.message_id)
    await bot.send_message(message.chat.id, result_message, reply_markup=universal_reply_markup(search=True), parse_mode='MarkdownV2')
    message.user_session['search_last'] = keyword



async def choose_city(message):
  city = message.user_session.get('search_city')
  if city == None:
    city = "–ú–æ—Å–∫–≤–∞"
  
  await bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –ø–∞–Ω–µ–ª–∏\n–£ –≤–∞—Å —Å—Ç–æ–∏—Ç: *{city}*', reply_markup=city_reply_markup(), parse_mode='MarkdownV2')
        
        
async def choose_city_handler(message):
  city = message.text.split()[1]
  message.user_session['search_city'] = city
  await search_next_step_handler(message, after_city_choose=True)

# ------------------------------------------------------------------------------------------------------------------------------------------------

# –í–µ—Ç–∫–∞ "–ü–æ–º–æ—â—å" ---------------------------------------------------------------------------------------------------------------------------------

async def help(message):
  await queue_message_async(
    topic = 'telegram_message_sender',
    destination_id = message.chat.id,
    message = '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: \n (https://t.me/Ropejamp) \n (https://t.me/plazmenni_rezak)'
  )

async def misSpell(message):
  await queue_message_async(
    topic = 'telegram_message_sender',
    destination_id = message.chat.id,
    message = '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é',
  )

# ------------------------------------------------------------------------------------------------------------------------------------------------

# –í–µ—Ç–∫–∞ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω" -----------------------------------------------------------------------------------------------------------------------

async def management_tokens(message):
  await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å x_supplier_id, –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –ø–æ—Å–ª–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω', reply_markup=management_tokens_reply_markup())
  set_user_session_step(message, 'Manage_tokens')


async def token_cmp_handler(message):
  try:
    user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
    user_wb_tokens = wb_queries.get_base_tokens(user, check=True)
  except Exception as e:
    logger.warn(e)
    await bot.send_message(message.chat.id, f'WBToken *–ù–µ –Ω–∞–π–¥–µ–Ω* –ª–∏–±–æ *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω*\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/–∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', parse_mode="MarkdownV2", reply_markup=edit_token_reply_markup())
    return set_user_session_step(message, 'Wb_cmp_token_edit')
  
  if user_wb_tokens:  
    await bot.send_message(message.chat.id, f'WBToken: {user_wb_tokens["wb_cmp_token"]}\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω –ê–∫—Ç–∏–≤–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=edit_token_reply_markup())
  set_user_session_step(message, 'Wb_cmp_token_edit')
  
  
async def x_supplier_id_handler(message):
  user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  try:
    x_supplier_id = user.x_supplier_id
  except:
    x_supplier_id = None
  
  if x_supplier_id:  
    await bot.send_message(message.chat.id, f'x_supplier_id: {x_supplier_id}\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π id, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=edit_token_reply_markup())
  else:
    await bot.send_message(message.chat.id, f'x_supplier_id *–ù–µ –Ω–∞–π–¥–µ–Ω* –ª–∏–±–æ *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω*\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π id, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/–∏—Å–ø—Ä–∞–≤–∏—Ç—å id', parse_mode="MarkdownV2", reply_markup=edit_token_reply_markup())
    return set_user_session_step(message, 'x_supplier_id_edit')
  set_user_session_step(message, 'x_supplier_id_edit')
  

async def set_x_supplier_id_handler(message):
  clear_id = message.text.replace('/set_x_supplier_id ', '').strip()
  user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  
  logger.warn(clear_id)
  await bot.send_message(message.chat.id, f'–í–∞—à id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\!')
  
  db_queries.set_user_x_supplier_id(telegram_user_id=message.from_user.id, x_supplier_id=clear_id)  
  db_queries.add_action_history(user_id=user.id, action="x_supplier_id", action_description=f"–ë—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω x_supplier_id: '{clear_id}'")


async def set_token_cmp_handler(message):
  clear_token = message.text.replace('/set_token_cmp ', '').strip()
  user = db_queries.get_user_by_telegram_user_id(message.from_user.id)

  try:
    wb_queries.reset_base_tokens(user, token_cmp=clear_token)
  except Exception as e:
    if str(e) == '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!':
      await bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω\!', reply_markup=universal_reply_markup())
      return
    raise e


  db_queries.set_user_wb_cmp_token(telegram_user_id=message.from_user.id, wb_cmp_token=clear_token)
  await bot.send_message(message.chat.id, '–í–∞—à —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\!', reply_markup=universal_reply_markup(), parse_mode='MarkdownV2')
  db_queries.add_action_history(user_id=user.id, action="–¢–æ–∫–µ–Ω", action_description=f"–ë—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω cmp Token: '{clear_token}'")
  

async def wb_v3_main_token_handler(message):
  try:
    user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
    user_wild_auth_v3_token = wb_queries.get_base_tokens(user, check=True)
  except Exception as e:
    logger.warn(e)
    await bot.send_message(message.chat.id, f'WildAuthNewV3 *–ù–µ –Ω–∞–π–¥–µ–Ω* –ª–∏–±–æ *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω*\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/–∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', parse_mode="MarkdownV2", reply_markup=edit_token_reply_markup())
    return set_user_session_step(message, 'Wb_v3_main_token_edit')
  
  if user_wild_auth_v3_token["wb_v3_main_token"] == None or user_wild_auth_v3_token["wb_v3_main_token"] == "":
    await bot.send_message(message.chat.id, f'WildAuthNewV3 *–ù–µ –Ω–∞–π–¥–µ–Ω* –ª–∏–±–æ *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω*\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/–∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', parse_mode="MarkdownV2", reply_markup=edit_token_reply_markup())
    return set_user_session_step(message, 'Wb_v3_main_token_edit')
  else:
    await bot.send_message(message.chat.id, f'WildAuthNewV3: {user_wild_auth_v3_token["wb_v3_main_token"]}\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω –ê–∫—Ç–∏–≤–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=edit_token_reply_markup())
  set_user_session_step(message, 'Wb_v3_main_token_edit')


async def set_wb_v3_main_token_handler(message):
  clear_token = message.text.replace('/set_wb_v3_main_token ', '').strip()
  user = db_queries.get_user_by_telegram_user_id(message.from_user.id)

  logger.warn(clear_token)
  try:
    wb_queries.reset_base_tokens(user, token_cmp=None, token_main_v3=clear_token)
  except Exception as e:
    if str(e) == '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!':
      await bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω\!', reply_markup=universal_reply_markup())
      return
    raise e

  message.user_session['update_v3_main_token'] = str(datetime.now())
  db_queries.set_user_wb_v3_main_token(telegram_user_id=message.from_user.id, wb_v3_main_token=clear_token)
  await bot.send_message(message.chat.id, '–í–∞—à —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\!', reply_markup=universal_reply_markup(), parse_mode='MarkdownV2')
  db_queries.add_action_history(user_id=user.id, action="–¢–æ–∫–µ–Ω", action_description=f"–ë—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω V3 Main Token: '{clear_token}'")


# ------------------------------------------------------------------------------------------------------------------------------------------------

# –í–µ—Ç–∫–∞ "–°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π" --------------------------------------------------------------------------------------------------------------
async def list_adverts(message):
  await list_adverts_handler(message)

async def list_adverts_handler(message):
  """–§—É–Ω–∫–∏—è –∫–æ—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
  from ui_backend.campaign_info.capaign_processor import Capaign_processor

  proccesing = await bot.send_message(message.chat.id, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...')
  user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  page_number = 1
  campaign_processing = Capaign_processor.create_campaign_processing(user=user, page_number=page_number)
  campaign_processing['metadata']['chat_id'] = message.chat.id
  campaign_processing['metadata']['message_id'] = proccesing.id

  await queue_message_async(topic=Topics.PROCESSING_CAMPAIGN_TOPIC,
                            campaign_processing=campaign_processing)



@bot.callback_query_handler(func=lambda x: re.match('page', x.data))
async def kek(data):
  await bot.edit_message_text('–í–∞–π–ª–¥–±–µ—Ä–∏—Å —Å—Ç–∞—Ä–∞–µ—Ç—Å—è üîÑ', data.message.chat.id, data.message.id, parse_mode='MarkdownV2')
  type_of_callback, page_number, user_id = data.data.split(':') # parameters = [type_of_callback, page_number, user_id]
  page_number = int(page_number)
  user = db_queries.get_user_by_telegram_user_id(user_id)
  user_wb_tokens = wb_queries.get_base_tokens(user)
  req_params = wb_queries.get_base_request_params(user_wb_tokens)
  
  # user_atrevds_data = wb_queries.get_user_atrevds(req_params, page_number=1)
  user_atrevds_data = wb_queries.get_user_atrevds(req_params)

  page_size = 6
  result_msg = await advert_info_message_maker(user_atrevds_data['adverts'], page_number=page_number, page_size=page_size, user=user)

  total_count = user_atrevds_data['total_count']
  action = "page"
  inline_keyboard = paginate_buttons(action, page_number, total_count, page_size, user_id)

  await bot.edit_message_text(result_msg, data.message.chat.id, data.message.id, parse_mode='MarkdownV2')
  await bot.edit_message_reply_markup(data.message.chat.id, data.message.id , reply_markup=inline_keyboard)
  await bot.answer_callback_query(data.id)

# ------------------------------------------------------------------------------------------------------------------------------------------------

# –í–µ—Ç–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é" ------------------------------------------------------------------------------------------------------------
@bot.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é')
async def cb_adverts(message):
  pass # TODO refactor
  # msg_text = '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "<campaign_id> <max_bid> <place> <status>" –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.'
  # sent = await bot.send_message(message.chat.id, msg_text, reply_markup=types.ReplyKeyboardRemove())
  # await bot.register_next_step_handler(sent,add_advert_handler)

async def add_advert_handler(message):
  """
  –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Å–∏–∏ –≤ –±–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —é–∑–µ—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
  TO wOrKeD:
  (–∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –±—é–¥–∂–µ—Ç, –º–µ—Å—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—Ç –∑–∞–Ω—è—Ç—å)
  –∑–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ –≤ –±–¥
  """
  user = db_queries.get_user_by_telegram_user_id(message.from_user.id)

  #(–∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –±—é–¥–∂–µ—Ç, –º–µ—Å—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—Ç –∑–∞–Ω—è—Ç—å)args*
  message_args = re.sub('/add_advert ', '', message.text).split(sep=' ', maxsplit=4)
  if len(message_args) != 4:
      msg_text = '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_advert <campaign_id> <max_bid> <place> <status>'
      await bot.send_message(message.chat.id, msg_text, reply_markup=universal_reply_markup())
      return

  campaign_id = re.sub('/add_advert ', '', message_args[0])
  max_bid = re.sub('/add_advert ', '', message_args[1])
  place = re.sub('/add_advert ', '', message_args[2])
  status = re.sub('/add_advert ', '', message_args[3])

  add_result = db_queries.add_user_advert(user, status, campaign_id, max_bid, place)
  
  res_msg = ''
  if add_result == 'UPDATED':
      res_msg = '–í–∞—à–∞ —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\!'
  elif add_result == 'ADDED':
      res_msg = '–í–∞—à–∞ —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞\!'

  await bot.send_message(message.chat.id, res_msg, reply_markup=universal_reply_markup(), parse_mode='MarkdownV2')

# ------------------------------------------------------------------------------------------------------------------------------------------------

# –í–µ—Ç–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫–∞" -----------------------------------------------------------------------------------------------------------------
@bot.message_handler(regexp='–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫–∞')
async def cb_adverts(message):
  pass # TODO refactor
  # sent = await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id user\'–∞\n–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–∞—Ç—É, –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ 2023-03-02 14:30', reply_markup=types.ReplyKeyboardRemove())
  # await bot.register_next_step_handler(sent, search_logs_next_step_handler)
        
        
async def search_logs_next_step_handler(message):
  search_logs = re.sub('/search_id ', '', message.text)
  search_user_id = search_logs.split()[0]
  timestamp = search_logs.split()[1] + " " + search_logs.split()[2]
  await bot.send_message(message.chat.id, f"user_id: {search_user_id}\ntimestamp: {timestamp}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç–∏–ø –ª–æ–≥–æ–≤ –í–∞—Å –∏–Ω—Ç–µ—Ä–∏—Å—É–µ—Ç", reply_markup=logs_types_reply_markup(user_id=search_user_id, timestamp=timestamp))

        
# ------------------------------------------------------------------------------------------------------------------------------------------------
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ ---------------------------------------------------------------------------------------------------------------------------

async def menu_additional_options(message):
  await bot.send_message(message.chat.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏*", parse_mode='MarkdownV2', reply_markup=universal_reply_markup_additionally())


async def menu_back(message):
  await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å *–ù–∞–∑–∞–¥* ü§ì", parse_mode='MarkdownV2', reply_markup=universal_reply_markup())
    

async def menu_back_word(message):
  await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å *–ù–∞–∑–∞–¥* ü§ì", parse_mode='MarkdownV2', reply_markup=adv_settings_reply_markup(message.from_user.id))


async def menu_back_selected_token(message):
  await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å *–ù–∞–∑–∞–¥* ü§ì", parse_mode='MarkdownV2', reply_markup=management_tokens_reply_markup())
  set_user_session_step(message, 'Manage_tokens')
  
  
  
async def menu_back_token(message):
  await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å *–ù–∞–∑–∞–¥* ü§ì", parse_mode='MarkdownV2', reply_markup=universal_reply_markup_additionally())
    

# ------------------------------------------------------------------------------------------------------------------------------------------------

# –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π -------------------------------------------------------------------------------------------------------------------------------
async def show_action_history(message):
  page_number = 1
  page_action = 5
  action_history = db_queries.show_action_history(message.chat.id)
  total_count_action = action_history.count()
  
  action = "–ù–µ—Ç"
  result_message = f'–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—Ç–µ\n–§–∏–ª—å—Ç—Ä: {action}\nC—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}\n\n'
  i = 1
  if total_count_action == 0:
    return await bot.send_message(message.chat.id, '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=universal_reply_markup())
  else:
    if page_number == 1:
      action_history = action_history[page_number-1:page_action]
  
  for action in action_history:
    result_message += f'[{i}]-----------------------------\n–î–∞—Ç–∞: {(action.date_time + timedelta(hours=3)).strftime("%m/%d/%Y, %H:%M:%S")}\n\n–î–µ–π—Å—Ç–≤–∏–µ: {action.description}\n-----------------------------\n\n'
    i+=1

  action = "action"
  inline_keyboard = paginate_buttons(action, page_number, total_count_action, page_action, message.from_user.id)
  await bot.send_message(message.chat.id, result_message, reply_markup=inline_keyboard)
  await bot.send_message(message.chat.id, '–ù–∞ –ø–∞–Ω–µ–ª–µ —Å–Ω–∏–∑—É –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é', reply_markup=action_history_reply_markup())


@bot.callback_query_handler(func=lambda x: re.match('action', x.data))
async def action_page(data):
  await bot.edit_message_text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è üîÑ', data.message.chat.id, data.message.id)
  type_of_callback, page_number, user_id = data.data.split(':') # parameters = [type_of_callback, page_number, user_id]
    
  page_number = int(page_number)
  page_action = 5
  action = "–ù–µ—Ç"
  if type_of_callback == "action_filter":
    action = cache_worker.get_action_history_filter(data.message.chat.id)
    action_history = db_queries.show_action_history(data.message.chat.id, action=action)
  else:
    action_history = db_queries.show_action_history(data.message.chat.id)
  result_message = f'–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—Ç–µ\n–§–∏–ª—å—Ç—Ä: {action}\nC—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}\n\n'
  total_count_action = action_history.count()
  
  if page_number != 1:
    action_history = action_history[(page_action*(page_number-1)):page_action*page_number]
    i = (5 * page_number)-4
  else:
    action_history = action_history[page_number-1:page_action]
    i = (5 * page_number)-4
    
  for action in action_history:
    result_message += f'[{i}]-----------------------------\n–î–∞—Ç–∞: {(action.date_time + timedelta(hours=3)).strftime("%m/%d/%Y, %H:%M:%S")}\n\n–î–µ–π—Å—Ç–≤–∏–µ: {action.description}\n-----------------------------\n\n'
    i+=1
  
  if type_of_callback == "action_filter":
    action = "action_filter"
  else:
    action = "action"
  inline_keyboard = paginate_buttons(action, page_number, total_count_action, page_action, user_id)      

  await bot.answer_callback_query(data.id)
  await bot.edit_message_text(result_message, data.message.chat.id, data.message.id)
  await bot.edit_message_reply_markup(data.message.chat.id, data.message.id , reply_markup=inline_keyboard)
  
# ------------------------------------------------------------------------------------------------------------------------------------------------

# ---- –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π // –ö–ù–û–ü–ö–ò -------------------------------------------------------------------------------------------------------------------

async def action_history_filter(message):
  await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é', reply_markup=action_history_filter_reply_markup(action="filter:action"))
  
  
@bot.callback_query_handler(func=lambda x: re.match('filter:action:', x.data))
async def action_page(data):
  action = data.data.split(':')[2] # parameters = [type_of_callback, page_number, user_id]
  # await bot.edit_message_text(action, data.message.chat.id, data.message.id)
  
  cache_worker.set_action_history_filter(user_id=data.message.chat.id, filter=action)
  
  page_number = 1
  page_action = 5
  action_history = db_queries.show_action_history(data.message.chat.id, action=action)
  total_count_action = action_history.count()
  
  
  result_message = f'–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—Ç–µ\n–§–∏–ª—å—Ç—Ä: {action}\nC—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}\n\n'
  i = 1
  if total_count_action == 0:
    return await bot.send_message(data.message.chat.id, '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=universal_reply_markup())
  else:
    if page_number == 1:
      action_history = action_history[page_number-1:page_action]
  
  for action in action_history:
    result_message += f'[{i}]-----------------------------\n–î–∞—Ç–∞: {(action.date_time + timedelta(hours=3)).strftime("%m/%d/%Y, %H:%M:%S")}\n\n–î–µ–π—Å—Ç–≤–∏–µ: {action.description}\n-----------------------------\n\n'
    i+=1

  action = "action_filter"
  
  inline_keyboard = paginate_buttons(action, page_number, total_count_action, page_action, data.message.from_user.id)
  await bot.edit_message_text(result_message, data.message.chat.id, data.message.id, reply_markup=inline_keyboard)
  
  
async def action_history_download(message):
  await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä', reply_markup=action_history_filter_reply_markup(action="download:action"))


@bot.callback_query_handler(func=lambda x: re.match('download:action:', x.data))
async def action_page(data):
  await bot.edit_message_text("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ", data.message.chat.id, data.message.id)
  action = data.data.split(':')[2] # parameters = [type_of_callback, page_number, user_id]
  action_history = db_queries.show_action_history(data.message.chat.id, action=action, download=True)
  
  result_message = ""
  i = 1
  for action in action_history:
    result_message += f'[{i}]-----------------------------\n–î–∞—Ç–∞: {(action.date_time + timedelta(hours=3)).strftime("%m/%d/%Y, %H:%M:%S")}\n\n–î–µ–π—Å—Ç–≤–∏–µ: {action.description}\n-----------------------------\n\n'
    i+=1
    
  file = io.BytesIO(result_message.encode('utf-8'))
  file.name = "action_history.txt"
  await bot.delete_message(data.message.chat.id, data.message.id)
  
  await bot.send_document(chat_id=data.message.chat.id, document=file, caption="–§–∞–π–ª –≥–æ—Ç–æ–≤")
  

# ------------------------------------------------------------------------------------------------------------------------------------------------

# --- –ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–≤–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ --------------------------------------------------------------------------------------------

async def send_message_for_advert_bid(message, adv_id):
  campaign_link = f"https://cmp.wildberries.ru/campaigns/list/all/edit/search/{adv_id}"
  result_msg = f'–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –†–ö —Å id [{adv_id}]({campaign_link}) –≤ —Ä—É–±–ª—è—Ö' #f"\t ID: [{advert['id']}]({campaign_link}) –°—Ç–∞—Ç—É—Å: {stat}\n"
  await bot.send_message(message.chat.id, result_msg, parse_mode = 'MarkdownV2') 
  set_user_session_step(message, 'Add_advert')
  


# ------------------------------------------------------------------------------------------------------------------------------------------------

# --- –ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ --------------------------------------------------------------------------------------------

async def send_message_for_advert_place(message, adv_id):
  campaign_link = f"https://cmp.wildberries.ru/campaigns/list/all/edit/search/{adv_id}"
  result_msg = f'–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –†–ö —Å id [{adv_id}]({campaign_link}) \n –ë–æ—Ç –±—É–¥–µ—Ç –¥–µ—Ä–∂–∞—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ –≤ —Ä–∞–º–∫–∞—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏' #f"\t ID: [{advert['id']}]({campaign_link}) –°—Ç–∞—Ç—É—Å: {stat}\n"
  await bot.send_message(message.chat.id, result_msg, parse_mode = 'MarkdownV2') 
  set_user_session_step(message, 'Set_advert_place')
  

# ------------------------------------------------------------------------------------------------------------------------------------------------


# --- –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ --------------------------------------------------------------------------------------------

async def add_advert(message):
  user_text = message.text
  adv_id = re.sub('/add_adv_', '', user_text)
  message.user_session['add_adv_id'] = adv_id
  await send_message_for_advert_bid(message, adv_id)
  # await bot.send_message(message.chat.id, f'–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –†–ö —Å id {adv_id} –≤ —Ä—É–±–ª—è—Ö')
  # set_user_session_step(message, 'Add_advert')
    


async def add_advert_with_define_id(message):
  user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  adv_id = message.user_session.get('add_adv_id')
  if adv_id == None:
    adv_id = message.user_session.get('adv_settings_id')
  user_number_value = re.sub(r'[^0-9]', '', message.text)
  db_queries.add_user_advert(user, adv_id, user_number_value, status='ON')
  await bot.send_message(message.chat.id, f'–†–ö —Å id {adv_id} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π {user_number_value}')
  message.user_session['add_adv_id'] = None
    

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ --------------------------------------------------------------------------------------------

async def adv_settings(message):
  user_text = message.text
  adv_id = re.sub('/adv_settings_', '', user_text)
  message.user_session['adv_settings_id'] = adv_id
  
  campaign = mock.Mock()
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  
  fixed = wb_queries.get_fixed(campaign_user, campaign)
  
  message.user_session['adv_fixed'] = fixed['fixed']
  
  await bot.send_message(message.chat.id, f'–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–∞–Ω–µ–ª—å, –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–ø–∞–Ω–∏–µ–π {adv_id}', reply_markup=adv_settings_reply_markup(message.from_user.id))


async def adv_settings_bid(message):
  adv_id = message.user_session.get('adv_settings_id')
  await send_message_for_advert_bid(message, adv_id)
  # await bot.send_message(message.chat.id, f'–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –†–ö —Å id {adv_id} –≤ —Ä—É–±–ª—è—Ö')
  # set_user_session_step(message, 'Add_advert')


async def adv_settings_place(message):
  adv_id = message.user_session.get('adv_settings_id')
  await send_message_for_advert_place(message, adv_id)
  # await bot.send_message(message.chat.id, f'–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –†–ö —Å id {adv_id} –≤ —Ä—É–±–ª—è—Ö')
  # set_user_session_step(message, 'Add_advert')


async def set_advert_place_with_define_id(message):
  user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  adv_id = message.user_session.get('adv_settings_id')
  user_number_value = re.sub(r'[^0-9]', '', message.text)
  db_queries.add_user_advert(user, adv_id, None, status='ON', place=user_number_value)
  await bot.send_message(message.chat.id, f'–†–ö —Å id {adv_id} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–º –º–µ—Å—Ç–µ {user_number_value}')
  message.user_session['add_adv_id'] = None
    

async def adv_settings_get_plus_word(message):
  
  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
  
  if len(words['fixed']) == 0:
    check_new = True
  else:
    check_new = False
  
  result_message = f'*–ü–ª—é—Å —Å–ª–æ–≤–∞*\n\n'
  for plus_word in words['pluses'][:30]:
    result_message += plus_word + "\n"  
  
  if check_new:
    result_message = f'–°–ø–∏—Å–æ–∫ *–ü–ª—é—Å —Å–ª–æ–≤*, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã –∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è \"–ö–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑\", –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:\n\n'
    
    db_words = db_queries.get_stat_words(types="plus", status="Created", campaing_id=adv_id)
    for plus_word in db_words:
      result_message += plus_word.word + "\n"  
    
    message.user_session['step'] = "new_get_word"
    set_user_session_step(message, "new_get_word")
  else:
    message.user_session['step'] = "get_word"
    set_user_session_step(message, "get_word")
    
  if "error" in words:
    result_message += words['error']
  
  await bot.send_message(message.chat.id, escape_telegram_specials(result_message), parse_mode="MarkdownV2", reply_markup=adv_settings_words_reply_markup(which_word="–ü–ª—é—Å", new=check_new))
  

async def new_adv_settings_add_plus_word(message):
  await bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Wildberries, —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ, –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è \"–ö–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑\", –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
  await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–ª—é—Å —Å–ª–æ–≤–æ")
  set_user_session_step(message, 'new_add_plus_word')
  

async def new_add_plus_word_next_step_handler(message):
  keyword = message.text

  adv_id = message.user_session.get('adv_settings_id')  
  pluse_word = keyword.lower()
  
  db_queries.add_stat_words(types="plus", campaing_id=adv_id, word=pluse_word)
  await bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ {keyword.lower()} –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    
  set_user_session_step(message, "new_get_word")
  

async def adv_settings_add_plus_word(message):
  await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–ª—é—Å —Å–ª–æ–≤–æ")
  set_user_session_step(message, 'add_plus_word')
  
  
async def add_plus_word_next_step_handler(message):
  keyword = message.text

  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
  
  pluse_word = [word.lower() for word in words['pluses']]
  pluse_word.append(keyword.lower())
  
  try:
    wb_queries.add_word(campaign_user, campaign, plus_word=pluse_word)
    await bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ {keyword.lower()} –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
  except:
    await bot.send_message(message.chat.id, f"–ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ WB –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
  set_user_session_step(message, "get_word")
  

async def new_adv_settings_delete_word(message):
  await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
  set_user_session_step(message, 'new_delete_word')


async def new_delete_word_next_step_handler(message):
  keyword = message.text
  
  deleted = db_queries.delete_stat_words(word=keyword)
  
  if deleted:
    await bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞ {keyword.lower()} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
  else:
    await bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É –≤ —Å–ø–∏—Å–∫–µ")
    
  set_user_session_step(message, "new_get_word")
  

async def adv_settings_get_minus_word(message):
  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
  
  if len(words['fixed']) == 0:
    check_new = True
  else:
    check_new = False  
  
  result_message = f'*–ú–∏–Ω—É—Å —Å–ª–æ–≤–∞*\n\n'
  for minus_word in words['minuses'][:30]:
    result_message += minus_word + "\n"
    
  if result_message == f'*–ú–∏–Ω—É—Å —Å–ª–æ–≤–∞*\n\n' and not check_new:
    result_message = "–ù–µ—Ç –º–∏–Ω—É—Å —Å–ª–æ–≤"
    
  if check_new:
    db_words = db_queries.get_stat_words(status="Created", campaing_id=adv_id, types="minus")
    result_message = f'–°–ø–∏—Å–æ–∫ *–ú–∏–Ω—É—Å —Å–ª–æ–≤*, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã –∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è \"–ö–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑\", –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:\n\n'
    for minus_word in db_words:
      result_message += minus_word.word + "\n"  
    
    message.user_session['step'] = "new_get_word"
    set_user_session_step(message, "new_get_word")
  else:
    message.user_session['step'] = "get_word"
    set_user_session_step(message, "get_word")
    
  if "error" in words:
    result_message += words['error']
    
  await bot.send_message(message.chat.id, escape_telegram_specials(result_message), parse_mode="MarkdownV2", reply_markup=adv_settings_words_reply_markup(which_word="–ú–∏–Ω—É—Å", new=check_new))
  

async def new_adv_settings_add_minus_word(message):
  await bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Wildberries, —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ, –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è \"–ö–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑\", –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
  await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Å —Å–ª–æ–≤–æ")
  await bot.send_message(message.chat.id, "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ú–∏–Ω—É—Å –§—Ä–∞–∑, –Ω—É–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å \'*–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã*\'", parse_mode="MarkdownV2")
  set_user_session_step(message, 'new_add_minus_word')
  
async def new_add_minus_word_next_step_handler(message):
  # await bot.send_message(message.chat.id, "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ú–∏–Ω—É—Å –§—Ä–∞–∑, –±—É–¥—É—Ç –≤—ã–∫–ª—é—á–µ–Ω—ã \'*–ü–ª—é—Å —Å–ª–æ–≤–∞*\'\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –≤–≤–µ–¥–∏—Ç–µ: –û—Ç–º–µ–Ω–∞", parse_mode="MarkdownV2")
  
  keyword = message.text
  
  if keyword == "–û—Ç–º–µ–Ω–∞":
    return await bot.send_message(message.chat.id, "–í—ã –≤–ø–∏—Å–∞–ª–∏ –û—Ç–º–µ–Ω–∞", parse_mode="MarkdownV2", reply_markup=adv_settings_reply_markup(message.from_user.id))
  
  adv_id = message.user_session.get('adv_settings_id')
  minus_word = keyword.lower()
  
  try:
    db_queries.add_stat_words(types="minus", campaing_id=adv_id, word=minus_word)
    await bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ {keyword.lower()} –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
  except:
    await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
  set_user_session_step(message, "new_get_word")
  
  
async def adv_settings_add_minus_word(message):
  await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Å —Å–ª–æ–≤–æ")
  await bot.send_message(message.chat.id, "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ú–∏–Ω—É—Å –§—Ä–∞–∑, –Ω—É–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å \'*–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã*\'", parse_mode="MarkdownV2")
  set_user_session_step(message, 'add_minus_word')
  
async def add_minus_word_next_step_handler(message):
  # await bot.send_message(message.chat.id, "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ú–∏–Ω—É—Å –§—Ä–∞–∑, –±—É–¥—É—Ç –≤—ã–∫–ª—é—á–µ–Ω—ã \'*–ü–ª—é—Å —Å–ª–æ–≤–∞*\'\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –≤–≤–µ–¥–∏—Ç–µ: –û—Ç–º–µ–Ω–∞", parse_mode="MarkdownV2")
  
  keyword = message.text
  
  if keyword == "–û—Ç–º–µ–Ω–∞":
    return await bot.send_message(message.chat.id, "–í—ã –≤–ø–∏—Å–∞–ª–∏ –û—Ç–º–µ–Ω–∞", parse_mode="MarkdownV2", reply_markup=adv_settings_reply_markup(message.from_user.id))
  
  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
  
  minus_word = [word.lower() for word in words['minuses']]
  minus_word.append(keyword.lower())
  
  try:
    wb_queries.add_word(campaign_user, campaign, excluded_word=minus_word)
    await bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ {keyword.lower()} –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
  except:
    await bot.send_message(message.chat.id, f"–ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ WB –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
  set_user_session_step(message, "get_word")
  
  
async def adv_settings_delete_plus_word(message):
  await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ü–ª—é—Å —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
  set_user_session_step(message, 'delete_plus_word')


async def delete_plus_word_next_step_handler(message):
  keyword = message.text

  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
  
  pluse_word = []
  check = False
  for word in words['pluses']:
    if word == keyword:
      check = True
      continue
    else:
      pluse_word.append(word)
  
  try:
    if check:
      wb_queries.add_word(campaign_user, campaign, plus_word=pluse_word)
      await bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞ {keyword.lower()} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
    else:
      await bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É –≤ —Å–ø–∏—Å–∫–µ")  
  except:
    await bot.send_message(message.chat.id, f"–ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ WB –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
  set_user_session_step(message, "get_word")
  

async def adv_settings_delete_minus_word(message):
  await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ú–∏–Ω—É—Å —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
  set_user_session_step(message, 'delete_minus_word')


async def delete_minus_word_next_step_handler(message):
  keyword = message.text

  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
  
  minus_word = []
  check = False
  for word in words['minuses']:
    if word == keyword:
      check = True
      continue
    else:
      minus_word.append(word)
  
  try:
    if check:
      wb_queries.add_word(campaign_user, campaign, excluded_word=minus_word)
      await bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞ {keyword.lower()} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
    else:
      await bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É –≤ —Å–ø–∏—Å–∫–µ")  
  except:
    await bot.send_message(message.chat.id, f"–ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ WB –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
  set_user_session_step(message, "get_word")
  

async def adv_settings_switch_fixed_word(message):
  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
  
  if words['fixed_status']:
    await bot.send_message(message.chat.id, f"–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: *–í–∫–ª—é—á–µ–Ω—ã*", parse_mode="MarkdownV2", reply_markup=fixed_word_switch(fixed_status=True))
  else:
    await bot.send_message(message.chat.id, f"–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: *–í—ã–∫–ª—é—á–µ–Ω—ã*", parse_mode="MarkdownV2", reply_markup=fixed_word_switch(fixed_status=False))
    
  set_user_session_step(message, 'fixed_word_status')
  
  
async def adv_settings_switch_on_word(message):
  message.user_session['adv_fixed'] = True
  update_user_session(message)
  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
  proccesing = await bot.send_message(message.chat.id, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...')
  chat_id_proccessing = proccesing.chat.id
  message_id_proccessing = proccesing.message_id
  
  
  if len(words['fixed']) == 0:
    switch = db_queries.change_status_stat_words(campaing_id=adv_id, types="Change", words="On")
    await bot.delete_message(chat_id_proccessing, message_id_proccessing)
    await bot.send_message(message.chat.id, f"–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –±—É–¥—É—Ç *–≤–∫–ª—é—á–µ–Ω—ã* –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—å—Å—è \"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\", –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è", parse_mode="MarkdownV2", reply_markup=adv_settings_reply_markup(message.from_user.id))
  else:
    try:
      switch = wb_queries.switch_word(user=campaign_user, campaign=campaign, switch="true")
      words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
      await bot.delete_message(chat_id_proccessing, message_id_proccessing)
      if words['fixed_status']:
        await bot.send_message(message.chat.id, f"–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –±—ã–ª–∏ *–í–∫–ª—é—á–µ–Ω—ã*", parse_mode="MarkdownV2", reply_markup=adv_settings_reply_markup(message.from_user.id))
      else:
        await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –Ω–µ –±—ã–ª–∏ *–í–∫–ª—é—á–µ–Ω—ã*, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="MarkdownV2", reply_markup=fixed_word_switch(fixed_status=False))
    except Exception as e:
      logger.warn(f"error {e}")
      await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="MarkdownV2", reply_markup=adv_settings_reply_markup(message.from_user.id))
    
  
async def adv_settings_switch_off_word(message):
  message.user_session['adv_fixed'] = False
  update_user_session(message)
  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
  
  proccesing = await bot.send_message(message.chat.id, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...')
  chat_id_proccessing = proccesing.chat.id
  message_id_proccessing = proccesing.message_id
  
  if len(words['fixed']) == 0:
    switch = db_queries.change_status_stat_words(campaing_id=adv_id, types="Change", words="Off")
    await bot.delete_message(chat_id_proccessing, message_id_proccessing)
    await bot.send_message(message.chat.id, f"–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –±—É–¥—É—Ç *–≤—ã–∫–ª—é—á–µ–Ω—ã* –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—å—Å—è \"–ö–ª—é—á–µ–≤–∞—ã–µ —Å–ª–æ–≤–∞\", –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è", parse_mode="MarkdownV2", reply_markup=adv_settings_reply_markup(message.from_user.id))
  else:
    try:
      switch = wb_queries.switch_word(user=campaign_user, campaign=campaign, switch="false")
      words = wb_queries.get_stat_words(user=campaign_user, campaign=campaign)
      await bot.delete_message(chat_id_proccessing, message_id_proccessing)
      if not words['fixed_status']:
        await bot.send_message(message.chat.id, f"–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –±—ã–ª–∏ *–í—ã–∫–ª—é—á–µ–Ω—ã*", parse_mode="MarkdownV2", reply_markup=adv_settings_reply_markup(message.from_user.id))
      else:
        await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –Ω–µ –±—ã–ª–∏ *–í—ã–∫–ª—é—á–µ–Ω—ã*, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="MarkdownV2", reply_markup=fixed_word_switch(fixed_status=True))
    except Exception:
      await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", parse_mode="MarkdownV2", reply_markup=adv_settings_reply_markup(message.from_user.id))
    
  
  
  
async def adv_settings_switch_status(message):
  proccesing = await bot.send_message(message.chat.id, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...')
  
  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  
  try:
    status = wb_queries.get_campaign_info(campaign_user, campaign)
  except:
    return await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ *–°—Ç–∞—Ç—É—Å–∞* –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ WB, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", parse_mode="MarkdownV2")
  
  budget = wb_queries.get_budget(campaign_user, campaign)
  status_parse = status_parser(status['status'])
  
  chat_id_proccessing = proccesing.chat.id
  message_id_proccessing = proccesing.message_id
  await bot.delete_message(chat_id_proccessing, message_id_proccessing)
  
  if status_parse == "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ":
    if budget['–ë—é–¥–∂–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏'] == 0:
      await bot.send_message(message.chat.id, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω–∏–∏: *{status_parse}*\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±—é–¥–∂–µ—Ç", parse_mode="MarkdownV2")
    else:
      await bot.send_message(message.chat.id, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω–∏–∏: *{status_parse}*\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ *–ê–∫—Ç–∏–≤–Ω–æ*, –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ", parse_mode="MarkdownV2", reply_markup=switch_status_reply_markup(status=status['status'], campaing_id=adv_id))
  elif status_parse == "–ê–∫—Ç–∏–≤–Ω–∞":
    await bot.send_message(message.chat.id, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω–∏–∏: *{status_parse}*\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ *–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*, –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ", parse_mode="MarkdownV2", reply_markup=switch_status_reply_markup(status=status['status'], campaing_id=adv_id))
  

@bot.callback_query_handler(func=lambda x: re.match('status:change:', x.data))
async def change_status(data):
  await bot.edit_message_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...", data.message.chat.id, data.message.id)
  change_to = data.data.split(':')[2]
  campaign = mock.Mock()
  adv_id = data.data.split(':')[3]
  campaign.campaign_id = adv_id
  user_id = data.message.chat.id
  campaign_user = db_queries.get_user_by_telegram_user_id(user_id)
  
  wb_queries.switch_status(campaign_user, campaign, status=change_to)
  
  if change_to == "pause":
    await bot.edit_message_text("–°—Ç–∞—Ç—É—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*", data.message.chat.id, data.message.id, parse_mode="MarkdownV2")
    
  elif change_to == "active":
    await bot.edit_message_text("–°—Ç–∞—Ç—É—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *–ê–∫—Ç–∏–≤–Ω–æ*", data.message.chat.id, data.message.id, parse_mode="MarkdownV2")


async def adv_settings_add_budget(message):
  campaign = mock.Mock()
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  budget = wb_queries.get_budget(campaign_user, campaign)['–ë—é–¥–∂–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏']
  
  await bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç: {budget} ‚ÇΩ\nid —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏: [{adv_id}](https://cmp.wildberries.ru/campaigns/list/all/edit/search/{adv_id})\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–µ–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥"', parse_mode="MarkdownV2")
  set_user_session_step(message, 'add_budget')
  
  
async def add_budget_next_step_handler(message):
  keyword = message.text  
  
  amount = int(keyword)
  
  campaign = mock.Mock()
  
  adv_id = message.user_session.get('adv_settings_id')
  campaign.campaign_id = adv_id
  
  campaign_user = db_queries.get_user_by_telegram_user_id(message.from_user.id)
  budget = wb_queries.get_budget(campaign_user, campaign)['–ë—é–¥–∂–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏']
  
  if amount <= 99:
    return await bot.send_message(message.chat.id, f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –º–µ–Ω–µ–µ, —á–µ–º –Ω–∞ 100 ‚ÇΩ', parse_mode="MarkdownV2")
  if amount % 50 != 0:
    return await bot.send_message(message.chat.id, f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏, —Å—É–º–º–∞ –Ω–µ –∫—Ä–∞—Ç–Ω–∞ 50', parse_mode="MarkdownV2")
  
  try:
    check = wb_queries.add_budget(campaign_user, campaign, amount)
    if check.raise_for_status and check.status_code == 429:
      return await bot.send_message(message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode="MarkdownV2")
    else:  
      budget2 = wb_queries.get_budget(campaign_user, campaign)['–ë—é–¥–∂–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏']
      if budget2 == None:
        return await bot.send_message(message.chat.id, f'WB –Ω–µ –≤–µ—Ä–Ω—É–ª –±—é–¥–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, –Ω–∞–∂–∞–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–Ω–æ–ø–∫—É \"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç\"', parse_mode="MarkdownV2")
      else:
        if budget == budget2:
          return await bot.send_message(message.chat.id, f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode="MarkdownV2")
        else:
          return await bot.send_message(message.chat.id, f'–ë—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –±—é–¥–∂–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ {amount} ‚ÇΩ\n–¢–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç: {budget2} ‚ÇΩ', parse_mode="MarkdownV2")
  except:
    await bot.send_message(message.chat.id, f'–ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ –≤–± –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ', parse_mode="MarkdownV2")
    
    

# –ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ -----------------------------------------------------------------------------------------------------------------------

async def show_paid_services(message):
  await bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∑–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å *–ø–æ–¥–ø–∏—Å–∫—É* –∏–ª–∏ *–∑–∞–ø—Ä–æ—Å—ã* –¥–ª—è ChatGPT", parse_mode="MarkdownV2", reply_markup=paid_service_reply_markup())
  set_user_session_step(message, 'paid_service')
  
  
async def show_my_requests(message):
  set_user_session_step(message, 'paid_service')
  user = db_queries.get_user_by_telegram_user_id(message.chat.id)
  gpt_requests = db_queries.get_user_gpt_requests(user_id=user.id)
  
  gpt_requests = 0 if gpt_requests == None else gpt_requests
    # —Ü–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–≥—Ä –Ω–∞ –¥–ª–∏–Ω–Ω—É 255 —Å–∏–º–≤–æ–ª–æ–≤(–∫–æ—Ç–æ—Ä—ã–µ –≤–≤–æ–¥–∏—Ç —é–∑–µ—Ä) + * –∫–æ–ª –≤–æ –Ω–∞ 2 + * 100 —É–º–Ω–æ–∂–∏—Ç—å(—Å–≤–æ–±–æ–¥–Ω—ã–π)
  await bot.send_message(message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å: {format_requests_count(gpt_requests)}, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤', reply_markup=paid_requests_inline_markup())
    

@bot.callback_query_handler(func=lambda x: re.match('paid_service:', x.data))
async def paid_service(data):
  user = db_queries.get_user_by_telegram_user_id(data.message.chat.id)
  
  action, action_type, amount =  data.data.split(":")
  amount = int(amount)
  if amount == 100:
    price = amount * INCREASE * 0.9
  else:
    price = amount * INCREASE
  
  if action_type == "requests":
    await bot.send_message(data.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n –¶–µ–Ω–∞: {price} ‚ÇΩ', reply_markup=reply_markup_payment(purchase=action_type, user_data=f"{amount}:{price}"))
  

async def show_my_sub(message):
  set_user_session_step(message, 'paid_service')
  user = db_queries.get_user_by_telegram_user_id(message.chat.id)
  my_sub = db_queries.get_sub(sub_id=user.subscriptions_id)
  if user.subscriptions_id:
    await bot.send_message(message.chat.id, '–ü–æ–¥–∫–ª—é—á–µ–Ω: `{}`\n–û–ø–∏—Å–∞–Ω–∏–µ: `{}`\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å `{}` –ø–æ `{}`'.format(my_sub.title, my_sub.description, user.sub_start_date.strftime('%d/%m/%Y'), user.sub_end_date.strftime('%d/%m/%Y')), reply_markup=paid_service_reply_markup())
    if not "Advanced" in my_sub.title:
      await bot.send_message(message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –±–æ–ª–µ–µ –∫—Ä—É—Ç—É—é –ø–æ–¥–ø–∏—Å–∫—É', reply_markup=paid_service_reply_markup())
      sub_list = db_queries.get_all_sub()
      # if PAYMENT_TOKEN.split(':')[1] == 'LIVE':
      if PAYMENT_TOKEN.split(':')[1] == 'TEST':
        for sub in sub_list:
          if sub.title == my_sub.title:
            continue
          await bot.send_message(message.chat.id, f'–ü–æ–¥–ø–∏—Å–∫–∞ - {sub.title}\n–¶–µ–Ω–∞ - {sub.price}\n–û–ø–∏—Å–∞–Ω–∏–µ - {sub.description}\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç`, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç', reply_markup=reply_markup_payment(purchase="subscription", user_data=f"{sub.title}"))
          # await bot.send_message(message.chat.id, f'–ü–æ–¥–ø–∏—Å–∫–∞ - {sub.title}\n–¶–µ–Ω–∞ - {sub.price}\n–û–ø–∏—Å–∞–Ω–∏–µ - {sub.description}\n\n   –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ telegram?\n–ï—Å–ª–∏ - –î–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º`\n–ï—Å–ª–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç`', reply_markup=reply_markup_payment(user_data=f"{sub.title}"))
  else:
    await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n–ù–∏–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ')
    sub_list = db_queries.get_all_sub()
    # if PAYMENT_TOKEN.split(':')[1] == 'LIVE':
    if PAYMENT_TOKEN.split(':')[1] == 'TEST':
      for sub in sub_list:
        await bot.send_message(message.chat.id, f'–ü–æ–¥–ø–∏—Å–∫–∞ - {sub.title}\n–¶–µ–Ω–∞ - {sub.price}\n–û–ø–∏—Å–∞–Ω–∏–µ - {sub.description}\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç`, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç', reply_markup=reply_markup_payment(purchase="subscription", user_data=f"{sub.title}"))
        # await bot.send_message(message.chat.id, f'–ü–æ–¥–ø–∏—Å–∫–∞ - {sub.title}\n–¶–µ–Ω–∞ - {sub.price}\n–û–ø–∏—Å–∞–Ω–∏–µ - {sub.description}\n\n–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ telegram?\n–ï—Å–ª–∏ - –î–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º`\n–ï—Å–ª–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç`', reply_markup=reply_markup_payment(user_data=f"{sub.title}"))

# --------------------------------------------------------------------------------------------------------------------------------

# --- card product --------------------------------------------------------------------------------------------

@check_sub(['Trial', 'Standartüî•', 'Advanced'])
async def card_product(message, sub_name):
  user = db_queries.get_user_by_telegram_user_id(message.chat.id)
  gtp_requests = db_queries.get_user_gpt_requests(user_id=user.id)
  
  if gtp_requests >= 1:
    # —Ü–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–≥—Ä –Ω–∞ –¥–ª–∏–Ω–Ω—É 255 —Å–∏–º–≤–æ–ª–æ–≤(–∫–æ—Ç–æ—Ä—ã–µ –≤–≤–æ–¥–∏—Ç —é–∑–µ—Ä) + * –∫–æ–ª –≤–æ –Ω–∞ 2 + * 100 —É–º–Ω–æ–∂–∏—Ç—å(—Å–≤–æ–±–æ–¥–Ω—ã–π)
    await bot.send_message(message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å: {gtp_requests} –∑–∞–ø—Ä–æ—Å–æ–≤\n–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=edit_token_reply_markup())
    set_user_session_step(message, 'card_product')
  else:
    # await bot.send_message(message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å "{tokens}" —Ç–æ–∫–µ–Ω–æ–≤, —ç—Ç–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞.\n–ú–∏–Ω–∏–º—É–º 100', reply_markup=universal_reply_markup())
    await bot.send_message(message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å "{gtp_requests}" –∑–∞–ø—Ä–æ—Å–æ–≤, —ç—Ç–æ–≥–æ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞.', reply_markup=universal_reply_markup())
    set_user_session_step(message, '–ë–∞–∑–∞')


async def card_product_next_step_handler(message):
  user = db_queries.get_user_by_telegram_user_id(message.chat.id)
  
  keyword = message.text
  
  if len(keyword) >= 255:
    return await bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ 255 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=universal_reply_markup())
  
  proccesing = await bot.send_message(message.chat.id, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", reply_markup=universal_reply_markup())
  user = db_queries.get_user_by_telegram_user_id(message.chat.id)
  gpt_text = gpt_queries.get_card_description(user_id=user.id, prompt=keyword)
  # logger.warn(gpt_text)
  
  await bot.delete_message(proccesing.chat.id, proccesing.message_id)
  await bot.send_message(message.chat.id, gpt_text, reply_markup=universal_reply_markup())

# --------------------------------------------------------------------------------------------------------------------------------

# --- —Ä–∞–±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏–µ–π --------------------------------------------------------------------------------------------

def set_user_session_step(message, step_name):
  message.user_session['step'] = step_name
  message.user_session_step_set = True

def update_user_session(message):
  if message.user_session == message.user_session_old:
    return
  
  message.user_session['updated_at'] = str(datetime.now())
  cache_worker.set_user_session(message.from_user.id, message.user_session)



# --- –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–µ–ø–æ–≤ --------------------------------------------------------------------------------------------

step_map = {
  '–ë–∞–∑–∞': {
    '–ü–æ–º–æ—â—å': help,
    '–ü–æ–∏—Å–∫': search_adverts,
    '–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏': show_paid_services,
    '–°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π': list_adverts,
    '–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥': choose_city,
    '–í—ã–±–æ—Ä:': choose_city_handler,
    '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏': management_tokens,
    '–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π': show_action_history,
    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏': menu_additional_options,
    '–í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é': action_history_filter,
    '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π': action_history_download,
    '–ù–∞–∑–∞–¥': menu_back,
    'add_adv_': add_advert,
    'adv_settings_': adv_settings,
    '–ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É': adv_settings_bid,
    '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –º–µ—Å—Ç–æ': adv_settings_place,
    '–ü–æ–∫–∞–∑–∞—Ç—å –ü–ª—é—Å —Å–ª–æ–≤–∞': adv_settings_get_plus_word,
    '–ü–æ–∫–∞–∑–∞—Ç—å –ú–∏–Ω—É—Å —Å–ª–æ–≤–∞': adv_settings_get_minus_word,
    '–í–∫–ª—é—á–∏—Ç—å –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã': adv_settings_switch_on_word,
    '–í—ã–∫–ª—é—á–∏—Ç—å –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã': adv_settings_switch_off_word,
    '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç': adv_settings_add_budget,
    '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å': adv_settings_switch_status,
    '–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞': card_product,
    '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑': adv_settings_switch_fixed_word,
    'default': misSpell
  },
  'Search_adverts': {
    'default': search_next_step_handler
  },
  'Set_token_cmp': {
    'default': set_token_cmp_handler
  },
  'Manage_tokens': {
    'WBToken': token_cmp_handler,
    'WildAuthNewV3': wb_v3_main_token_handler,
    'x_supplier_id': x_supplier_id_handler,
    '–ù–∞–∑–∞–¥' : menu_back_token,
  },
  'Wb_cmp_token_edit': {
    'default': set_token_cmp_handler,
    '–ù–∞–∑–∞–¥' : menu_back_selected_token,
  },
  'Wb_v3_main_token_edit': {
    'default': set_wb_v3_main_token_handler,
    '–ù–∞–∑–∞–¥' : menu_back_selected_token,
  },
  'x_supplier_id_edit': {
    'default': set_x_supplier_id_handler,
    '–ù–∞–∑–∞–¥' : menu_back_selected_token,
  },
  'Add_advert': {
    'default': add_advert_with_define_id
  },
  'fixed_word_status': {
      '–ù–∞–∑–∞–¥': menu_back_word,
      '–í–∫–ª—é—á–∏—Ç—å –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã': adv_settings_switch_on_word,
      '–í—ã–∫–ª—é—á–∏—Ç—å –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã': adv_settings_switch_off_word,
  },
  'Set_advert_place': {
    '–ù–∞–∑–∞–¥': menu_back_word,
    'default': set_advert_place_with_define_id
  },
  'card_product': {
    'default': card_product_next_step_handler,
    '–ù–∞–∑–∞–¥': menu_back,
  },
  'get_word': {
    '–ù–∞–∑–∞–¥': menu_back_word,
    '–î–æ–±–∞–≤–∏—Ç—å –ü–ª—é—Å —Å–ª–æ–≤–æ': adv_settings_add_plus_word,
    '–î–æ–±–∞–≤–∏—Ç—å –ú–∏–Ω—É—Å —Å–ª–æ–≤–æ': adv_settings_add_minus_word,
    '–£–¥–∞–ª–∏—Ç—å –ü–ª—é—Å —Å–ª–æ–≤–æ': adv_settings_delete_plus_word,
    '–£–¥–∞–ª–∏—Ç—å –ú–∏–Ω—É—Å —Å–ª–æ–≤–æ': adv_settings_delete_minus_word,
  },
  'add_plus_word': {
    'default': add_plus_word_next_step_handler,
    '–ù–∞–∑–∞–¥': menu_back_word,
  },
  'add_minus_word': {
    'default': add_minus_word_next_step_handler,
    '–ù–∞–∑–∞–¥': menu_back_word,
  },
  'delete_plus_word': {
    'default': delete_plus_word_next_step_handler,
    '–ù–∞–∑–∞–¥': menu_back_word,
  },
  'delete_minus_word': {
    'default': delete_minus_word_next_step_handler,
    '–ù–∞–∑–∞–¥': menu_back_word,
  },
  # New - –û–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ç–æ, —á—Ç–æ –†–ö –Ω–æ–≤–∞—è –∏ –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –±—É–¥–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  'new_get_word': {
    '–ù–∞–∑–∞–¥': menu_back_word,
    '–î–æ–±–∞–≤–∏—Ç—å –ü–ª—é—Å —Å–ª–æ–≤–æ –ü–æ—Ç–æ–º': new_adv_settings_add_plus_word,
    '–î–æ–±–∞–≤–∏—Ç—å –ú–∏–Ω—É—Å —Å–ª–æ–≤–æ –ü–æ—Ç–æ–º': new_adv_settings_add_minus_word,
    '–£–¥–∞–ª–∏—Ç—å –ü–ª—é—Å —Å–ª–æ–≤–æ –ü–æ—Ç–æ–º': new_adv_settings_delete_word,
    '–£–¥–∞–ª–∏—Ç—å –ú–∏–Ω—É—Å —Å–ª–æ–≤–æ –ü–æ—Ç–æ–º': new_adv_settings_delete_word,
  },
  'new_add_plus_word': {
    'default': new_add_plus_word_next_step_handler,
    '–ù–∞–∑–∞–¥': menu_back_word,
  },
  'new_add_minus_word': {
    'default': new_add_minus_word_next_step_handler,
    '–ù–∞–∑–∞–¥': menu_back_word,
  },
  'new_delete_word': {
    'default': new_delete_word_next_step_handler,
    '–ù–∞–∑–∞–¥': menu_back_word,
  },
  'add_budget': {
    'default': add_budget_next_step_handler,
    '–ù–∞–∑–∞–¥': menu_back_word,
  },
  'paid_service': {
    '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞': show_my_sub,
    '–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã': show_my_requests,
    '–ù–∞–∑–∞–¥': menu_back
  }
}